import { untwist, pointDouble, pointMul, pointAdd, point } from "../src/points"
import { fp1FromBigInt, fp2FromBigInt, fp6FromBigInt, fp12FromBigInt } from "../src/fields"
import { BigNumber } from "@ethersproject/bignumber";
import { Fp, Fp1, Fp2, Fp6, Fp12 } from "../src/fields"

import { pairing, miller, doubleEval, addEval } from "../src/pairing"

const g1AddTestVector = require("./fixtures/g1_add.json")
const g2AddTestVector = require("./fixtures/g2_add.json")

function verify() {
    let P = new point (
        fp1FromBigInt(BigNumber.from("3071902358779104425805220059913391042958977442368743450008922736970201383908820407429457646333339330346464018568299")),
        fp1FromBigInt(BigNumber.from("208729469830998646909339719617829960147637284847029296662162145937938053125975650713155855600870449370845588704920")),
        false 
    )

    let Hm = new point (
        new Fp2(
            fp1FromBigInt(BigNumber.from("1415033902787182855438525880265740502247094338592724303348913656759135659148687018733629836109788356328639977371612")),
            fp1FromBigInt(BigNumber.from("521010989441092969816302528818722782451414139298555169156565769681228716793547380025921175103710083605354413189410"))
        ),
        new Fp2(
            fp1FromBigInt(BigNumber.from("3836330025479183442209453614062484193020288418653352763466489115630412812349665441161035479761821763667164814821620")),
            fp1FromBigInt(BigNumber.from("3574882020039341286586192052361570130112186720003377002387110581504236316210083690510791994317284476106094542592479"))
        ),
        false
    )


    let G = new point (
        fp1FromBigInt(BigNumber.from("3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507")),
        fp1FromBigInt(BigNumber.from("1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569")),
        false 
    )

    let S = new point (
        new Fp2(
            fp1FromBigInt(BigNumber.from("966572263166434944599183957482752531047038993953916430862595578899059824912156165297149403978420723932172123775406")),
            fp1FromBigInt(BigNumber.from("842321951799503469014964953496381065608123412078137658319961132736911642409943969612292629578043499296195717122533"))
        ),
        new Fp2(
            fp1FromBigInt(BigNumber.from("1639805997476177777241606094884612303776858264957232458415894583607376414805753804084820168641517462543804792794779")),
            fp1FromBigInt(BigNumber.from("3855722596444217665140296300241881837775734411784092265317102637289824807772757224642216633698428180424693166393122"))
        ),
        false
    )


    console.log(G.isOnCurve())
    console.log(Hm.isOnCurve())


    let pairingRes = pairing(P.pointNegate(), Hm)
    let pairingRes2 = pairing(G, S)

    pairingRes.displayInfo()
    pairingRes2.displayInfo()
    console.log(pairingRes.eq(pairingRes2))
}

verify()